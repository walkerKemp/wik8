Theoretical emulator device

Thank you to tsoding, the motivation for this project
  https://www.twitch.tv/tsoding

WIK8 - 3mhz
  - High speed registers:
    - pcc
    - acc
    - bak
    - stk
    - fl0
    - fl1

  - All registers are 32 bit signed integers
    - pcc : Program counter, increments everytime you read a byte
    - acc : Accumulator, Only register used for math, most used register in code
    - bak : Backup, only used with specific instructions, mostly communicates with the accumulator
    - stk : Stack, a pointer to a space in memory
    - fl0 : Flag 0, some instructions write their results to this register
    - fl1 : Flag 1, see fl0

  - Address space
    # area [start, end], end + 1)
    - rom [0, 31999], 32000) - Read only memory, this is where the program that the device runs
                                is stored
    - kbi [32000, 32001], 32002) - Read only one number used to store the state of the 8 keyboard
                                    input keys (w a s d i j k l)
    - mos [32002, 32004], 32005) - Read only memory, three slots of memory used for mouse information,
                                    [32002] is mouse x, [32003] is mouse y, [32004] is mouse buttons
    - ram [32005, 96005], 96006) - Random access memory, indexed by the stk registers, used for
                                    anything the programmer can make
  - Instructions
    - nop             - No op
    - zer <dst>       - Zero, Set the value of dst to 0
    - mvi <dst> <num> - Move integer, Set the value of dst to num
    - mov <dst> <dst> - Move register, Set the value of the first dst to the second
    - adi <num>       - Add integer, Add the value of num to the accumulator
    - add <dst>       - Add register, Add the value from dst to the accumulator
    - sbi <num>       - Subtract num, Subtract the accumulator by num
    - sub <dst>       - Subtract register, Subtract the accumulator from dst
    - swp             - Swap, Swaps the value of the accumulator and the backup
    - sav             - Save, Saves the value of the accumulator to the backup
    - jmp <off>       - Jump, Unconditionally sets the value of the pcc to offset
    - jez <off>       - Jump if equal to zero, sets the value of the pcc to offset if acc == 0
    - jnz <off>       - Jump if not zero, sets the value of the pcc to offset if acc != 0
    - jgz <off>       - Jump greater than zero, sets the value of the pcc to offset if acc > 0
    - jlz <off>       - Jump less than zero, sets the value of the pcc to offset if acc < 0
    - cei <num>       - Compare equal to, set the lowest bit in fl0 to 1 if acc == num
    - cni <num>       - Compare not equal, set the 2nd lowest bit in fl0 to 1 if acc != num
    - cgi <num>       - Compare greater than, set the 3rd lowest bit in fl0 to 1 if acc > num
    - cli <num>       - Compare less than, set the 4th lowest bit in fl0 to 1 if acc < num
    - cet <dst>       - Compare equal to, set the 5th lowest bit in fl0 to 1 if acc == *dst
    - cnt <dst>       - Compare not equal to, set the 6th lowest bit in fl0 to 1 if acc != *dst
    - cgt <dst>       - Compare greater than, set the 7th lowest bit in fl0 to 1 if acc > *dst
    - clt <dst>       - Compare less than, set the 8th lowest bit in fl0 to 1 if acc < *dst
    - psi <num>       - Push integer, Move the value of num into memory at stk location
    - psh <dst>       - Push, Move the value of dst to memory at stk location
    - pop <dst>       - Pop, Move the value of memory at stk location into dst
    - inc             - Increment, Increment stk by 1
    - dec             - Decrement, Decrement stk by 1
    - fnc <off>       - Function call, jump to offset and copy the value of pcc into fl1
    - ret             - Return, set the pcc to fl1, basically just jump back to fnc
    - ras <x>   <x>   - Rasterizer call, send data to the rasterizer see rasterizer section for more
    - kil             - Kill, turns the device off

  - Features
    - Overflowing the pcc value out of rom is not illegal. What this means is that if you made some
       code that put legal instructions into ram, you can set the pcc to that place in ram and it
       could be run. This is the basis for arbitary code execution, see Sethbling super mario ACE
       speedrun.
    - 3 mhz cycle speed

  - Registers chart

    NAME | OPCODE | CANREAD | CANWRITE
    pcc | 0x10 | yes | yes
    acc | 0x11 | yes | yes
    bak | 0x12 | no  | no
    stk | 0x13 | yes | yes
    fl0 | 0x14 | yes | yes
    fl1 | 0x15 | yes | yes

  - Memory chart
    
    NAME | START | END | SPEED (cycles to access)
    rom  | 00    | 31999 | 1
    kbi  | 32000 | 32001 | 1
    mos  | 32002 | 32004 | 1
    ram  | 32005 | 96005 | 2

  - Instructions

    NAME | OPCODE | OP1 | OP2 | SPEED
    nop | 0x20 |  -  |  -  | 1
    zer | 0x21 | dst |  -  | 1
    mvi | 0x22 | dst | num | 1
    mov | 0x23 | dst | dst | 1
    adi | 0x24 | num |  -  | 1
    add | 0x25 | dst |  -  | 1
    sbi | 0x26 | num |  -  | 1
    sub | 0x27 | dst |  -  | 1
    swp | 0x28 |  -  |  -  | 1
    sav | 0x29 |  -  |  -  | 1
    jmp | 0x2a | off |  -  | 1
    jez | 0x2b | off |  -  | 1
    jnz | 0x2c | off |  -  | 1
    jgz | 0x2d | off |  -  | 1
    jlz | 0x2e | off |  -  | 1
    cei | 0x2f | num |  -  | 2
    cni | 0x30 | num |  -  | 2
    cgi | 0x31 | num |  -  | 2
    cli | 0x32 | num |  -  | 2
    cet | 0x33 | off |  -  | 2
    cnt | 0x34 | off |  -  | 2
    cgt | 0x35 | off |  -  | 2
    clt | 0x36 | off |  -  | 2
    psi | 0x37 | num |  -  | 1
    psh | 0x38 | dst |  -  | 1
    pop | 0x39 | dst |  -  | 1
    inc | 0x3a |  -  |  -  | 1
    dec | 0x3b |  -  |  -  | 1
    fnc | 0x3c | off |  -  | 1
    ret | 0x3d |  -  |  -  | 1
    rsi | 0x3e | num | num | 1
    rsd | 0x3f | num | dst | 1
    rai | 0x40 | dst | num | 1
    rad | 0x41 | dst | dst | 1
    kil | 0x42 |  -  |  -  | 1

  - Operand types
    - num : number of type integer
    - dst : register opcode
    - off : offset

  - Rasterizer
    - The rasterizer will take in two arguments, x and y where x is the mode and y is a pointer
       to a buffer
    - A buffer is a set of numbers in sequence in mem that are the operands to the mode denoted
       by the function call
      Example:
      rsi 2 35000 -> this will call the rasterizer to draw a pixel where x is stored at
       mem[35000] y is stored at [35001] and color is stored at [35002]
      rsd is really good for this because you can write to a buffer and just call rsd 2 stk after
       you decrement stk by 2
    - Modes
      - Mode 0       | Clears all of the pixels on screen by settings them to black
      - Mode 1 x y   | Clears one pixel at x y location
      - Mode 2 x y c | Sets the pixel at x y to c(olor)
      - Mode 3 x y w h c | Draws a filled rectangle with the top left at x y with the
         width and height of w h with the c(olor)
      - Mode 4 x y w h c | Draws a rectangle outline with the thickness of 1
    - Speed
      - Every draw instruction takes 1 cycle
  
  - Functions
    - A function is not a special feature it is more of an ease of use feature for the programmer
    - When you call fnc x it will set the pcc to x like a normal jump command but it stores
       pcc in the fl1 register so you can use the ret command to jump back to where you were
       when you called the function
    - This does however save some cycles when jumping so using this is more effient than writing
       your own jump back feature or macro

